AWSTemplateFormatVersion: '2010-09-09'
Description: CodePipeline CFN Stack for 'cognito-restore-service' micro-service

Parameters:
  Prefix:
    Type: String
    Default: 'cognito-restore'
  Environment:
    Type: String
    Default: 'dev'
  GitHubOwner:
    Type: String
    Default: 'Blueshirt-work'
  GitHubRepositoryName:
    Type: String
    Default: 'test_cognito'
  RepoName:
    Type: String
    Default: 'cognito_restore_test'
  GitBranch:
    Type: String
    Default: 'main'
  Region:
    Type: String
    Default: 'ap-south-1'
  ResourceStackName:
    Type: String
    Default: 'cognito-restore-service-dev-stack'
  PipelineArtifactBucket:
    Type: String
    Default: 'cognito-restore-dev-pipeline-artifactsbucket'
  CodeStarConnectionArn:
    Type: String
    Default: 'arn:aws:codeconnections:ap-south-1:698032826194:connection/1a46d7fe-b424-4e8f-a61c-1b32b52173d7'
  Stage:
    Type: String
    Default: 'dev'
  S3Bucket:
    Type: String
    Default: 'cognito-backup-bucket-test-s3'
  S3Key:
    Type: String
    Default: 'cognito-users-backup.json'
  UserPoolId:
    Type: String
    Default: 'ap-south-1_OpPrIODGO'
  XrayEnabled:
    Type: String
    Default: 'true'
  Tags:
    Type: String
    Default: 'Project=CognitoRestore Service=Serverless'
  IsS3BucketExists:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]

Conditions:
  IsS3BucketExistsCondition: !Equals [!Ref IsS3BucketExists, "true"]

Resources:

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Prefix}-${Environment}-pipe-${AWS::AccountId}'

  PipelineArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineArtifactBucket
      PolicyDocument:
        Statement:
          - Effect: 'Deny'
            Action: 's3:*'
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}
              - !Sub arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}/*
            Condition:
              Bool:
                aws:SecureTransport: false
          - Effect: Allow
            Action: s3:*
            Principal:
              AWS:
                - !GetAtt CodePipelineExecutionRole.Arn
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}
              - !Sub arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}/*

  CodePipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Prefix}-${Environment}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: codepipeline.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Prefix}-${Environment}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: ECRPushPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:PutImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepoName}-${Environment}

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${RepoName}-${Environment}
      EmptyOnDelete: false
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  CodeBuildProjectBuildAndPackage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${Prefix}-${Environment}-BuildPackage'
      Artifacts:
        Type: CODEPIPELINE
        Files:
          - imagedefinitions.json
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REGION
            Value: !Ref Region
          - Name: AWS_REGION
            Value: !Ref Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_ECR_REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}-${Environment}
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 18
                docker: 20
              commands:
                - echo "Installing AWS CLI v2..."
                - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                - unzip awscliv2.zip
                - sudo ./aws/install
                - export PATH=$PATH:/usr/local/bin
                - echo "Installing dependencies..."
                - npm install

            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_REPOSITORY_URI}
                - echo Setting environment variables...
                - IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION}
                - echo $IMAGE_TAG

            build:
              commands:
                - echo Building Docker image...
                - docker build -t ${AWS_ECR_REPOSITORY_URI}:${IMAGE_TAG} .
                - docker tag ${AWS_ECR_REPOSITORY_URI}:${IMAGE_TAG} ${AWS_ECR_REPOSITORY_URI}:latest

            post_build:
              commands:
                - echo Pushing Docker image to ECR...
                - docker push ${AWS_ECR_REPOSITORY_URI}:${IMAGE_TAG}
                - docker push ${AWS_ECR_REPOSITORY_URI}:latest
                - echo Writing image definitions file...
                - printf '[{"name":"cognito-restore-service","imageUri":"%s"}]' ${AWS_ECR_REPOSITORY_URI}:${IMAGE_TAG} > imagedefinitions.json

          artifacts:
            files: imagedefinitions.json
      TimeoutInMinutes: 30

  CodeBuildProjectDeploy:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${Prefix}-${Environment}-Deploy'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_REGION
            Value: !Ref Region
          - Name: AWS_ECR_REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}-${Environment}
          - Name: STAGE
            Value: !Ref Environment
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 18
              commands:
                - echo "Deploying serverless..."
                - npm install -g serverless
            build:
              commands:
                - echo "Deploying application..."
                - serverless deploy --stage ${Stage} --region ${AWS::Region}
            post_build:
              commands:
                - echo "Logging into Amazon ECR..."
                - $(aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS_ECR_REPOSITORY_URI})
                - echo "Building Docker image..."
                - docker build -t ${AWS_ECR_REPOSITORY_URI}:latest .
                - echo "Pushing Docker image to ECR..."
                - docker push ${AWS_ECR_REPOSITORY_URI}:latest
                - echo "Docker image pushed to ECR"
      TimeoutInMinutes: 30

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${RepoName}-${Environment}-pipeline'
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      RoleArn: !GetAtt CodePipelineExecutionRole.Arn
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:
            - Name: SourceCodeRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Sub "${GitHubOwner}/${GitHubRepositoryName}"
                BranchName: !Ref GitBranch
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceCodeAsZip
              RunOrder: 1
        - Name: BuildAndPackage
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                ProjectName: !Ref CodeBuildProjectBuildAndPackage
              InputArtifacts:
                - Name: SourceCodeAsZip
              OutputArtifacts:
                - Name: BuildArtifactAsZip
        - Name: Deploy
          Actions:
            - Name: DeployServerless
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProjectDeploy
              InputArtifacts:
                - Name: BuildArtifactAsZip
              RunOrder: 1
