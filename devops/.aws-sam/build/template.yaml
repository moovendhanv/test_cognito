AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'CodePipeline CFN Stack for ''cognito-restore-service'' micro-service

  '
Parameters:
  Prefix:
    Type: String
    Default: cognito-restore
  Environment:
    Type: String
    Default: dev
  GitHubOwner:
    Type: String
    Default: Blueshirt-work
  GitHubRepositoryName:
    Type: String
    Default: test_cognito
  RepoName:
    Type: String
    Default: cognito_restore_test
  GitBranch:
    Type: String
    Default: main
  Region:
    Type: String
    Default: ap-south-1
  ResourceStackName:
    Type: String
    Default: cognito-restore-service-dev-stack
  PipelineArtifactBucket:
    Type: String
    Default: cognito-restore-dev-pipeline-artifactsbucket
  CodeStarConnectionArn:
    Type: String
    Default: arn:aws:codestar-connections:us-east-1:698032826194:connection/0e2ebc7a-a6ba-412c-9237-9b502252421c
  Stage:
    Type: String
    Default: dev
  S3Bucket:
    Type: String
    Default: cognito-backup-bucket-test-s3
  S3Key:
    Type: String
    Default: cognito-users-backup.json
  UserPoolId:
    Type: String
    Default: ap-south-1_OpPrIODGO
  XrayEnabled:
    Type: String
    Default: 'true'
  Tags:
    Type: String
    Default: Project=CognitoRestore Service=Serverless
  IsS3BucketExists:
    Default: 'false'
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
Conditions:
  IsS3BucketExistsCondition:
    Fn::Equals:
    - Ref: IsS3BucketExists
    - 'true'
Resources:
  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${Prefix}-${Environment}-pipe-${AWS::AccountId}
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name:
        Fn::Sub: ${RepoName}-${Environment}-pipeline
      ArtifactStore:
        Location:
          Ref: CodePipelineArtifactBucket
        Type: S3
      RoleArn:
        Fn::GetAtt:
        - CodePipelineExecutionRole
        - Arn
      RestartExecutionOnUpdate: true
      Stages:
      - Name: Source
        Actions:
        - Name: SourceCodeRepo
          ActionTypeId:
            Category: Source
            Owner: AWS
            Provider: CodeStarSourceConnection
            Version: '1'
          Configuration:
            ConnectionArn:
              Ref: CodeStarConnectionArn
            FullRepositoryId:
              Fn::Sub: ${GitHubOwner}/${GitHubRepositoryName}
            BranchName:
              Ref: GitBranch
            OutputArtifactFormat: CODE_ZIP
          OutputArtifacts:
          - Name: SourceCodeAsZip
          RunOrder: 1
      - Name: BuildAndPackage
        Actions:
        - Name: CodeBuild
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          RunOrder: 1
          Configuration:
            ProjectName:
              Ref: CodeBuildProjectBuildAndPackage
          InputArtifacts:
          - Name: SourceCodeAsZip
          OutputArtifacts:
          - Name: BuildArtifactAsZip
      - Name: Deploy
        Actions:
        - Name: DeployServerless
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          Configuration:
            ProjectName:
              Ref: CodeBuildProjectDeploy
          InputArtifacts:
          - Name: BuildArtifactAsZip
          RunOrder: 1
  PipelineArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: CodePipelineArtifactBucket
      PolicyDocument:
        Statement:
        - Effect: Deny
          Action: s3:*
          Principal: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}/*
          Condition:
            Bool:
              aws:SecureTransport: false
        - Action:
          - s3:*
          Effect: Allow
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}/*
          Principal:
            AWS:
            - Fn::GetAtt:
              - CodePipelineExecutionRole
              - Arn
  CodePipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${Prefix}-${Environment}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
      Policies:
      - PolicyName: CodePipelineAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: '*'
      - PolicyName: CodePipelineCodeAndS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:GetBucketAcl
            - s3:GetBucketLocation
            Effect: Allow
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}
            - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}/*
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            Effect: Allow
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}
            - Fn::Sub: arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}/*
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        Fn::Sub: ${RepoName}-${Environment}
      EmptyOnDelete: false
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: "{\n  \"rules\": [\n    {\n      \"rulePriority\": 1,\n\
          \      \"description\": \"Keep only the last 5 images\",\n      \"selection\"\
          : {\n        \"tagStatus\": \"any\",\n        \"countType\": \"imageCountMoreThan\"\
          ,\n        \"countNumber\": 5\n      },\n      \"action\": {\n        \"\
          type\": \"expire\"\n      }\n    }\n  ]\n}\n"
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${Prefix}-${Environment}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      Policies:
      - PolicyName: CodeBuildLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
  CodeBuildProjectBuildAndPackage:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
        - Name: REGION
          Value:
            Ref: Region
        - Name: AWS_ACCOUNT_ID
          Value:
            Ref: AWS::AccountId
        - Name: AWS_ECR_REPOSITORY_URI
          Value:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}-${Environment}
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildServiceRole
        - Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: "version: 0.2\nphases:\n  install:\n    runtime-versions:\n   \
          \   nodejs: 18\n    commands:\n      - echo \"Installing dependencies...\"\
          \n      - npm install\n  build:\n    commands:\n      - echo \"Building...\"\
          \n      - npm run build\n  post_build:\n    commands:\n      - echo \"Build\
          \ complete!\"\n      - docker build -t ${AWS_ECR_REPOSITORY_URI}:latest\
          \ .\n      - docker push ${AWS_ECR_REPOSITORY_URI}:latest\n      - echo\
          \ \"Pushed Docker Image\"\n"
      TimeoutInMinutes: 30
      Name:
        Fn::Sub: ${Prefix}-${Environment}-BuildPackage
  CodeBuildProjectDeploy:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        PrivilegedMode: true
      ServiceRole:
        Fn::GetAtt:
        - CodeBuildServiceRole
        - Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: "version: 0.2\nphases:\n  install:\n    runtime-versions:\n   \
          \   nodejs: 18\n    commands:\n      - echo \"Deploying serverless...\"\n\
          \      - npm install -g serverless\n  build:\n    commands:\n      - echo\
          \ \"Deploying application...\"\n      - serverless deploy --stage ${Stage}\
          \ --region ${Region}\n  post_build:\n    commands:\n      - echo \"Deployment\
          \ complete!\"\n"
      TimeoutInMinutes: 30
      Name:
        Fn::Sub: ${Prefix}-${Environment}-Deploy
