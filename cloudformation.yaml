AWSTemplateFormatVersion: '2010-09-09'
Description: CodePipeline CFN Stack for 'cognito-restore-service' micro-service with VPC

Parameters:
  Prefix:
    Type: String
    Default: 'cognito-restore'
  Environment:
    Type: String
    Default: 'dev'
  GitHubOwner:
    Type: String
    Default: 'Blueshirt-work'
  GitHubRepositoryName:
    Type: String
    Default: 'test_cognito'
  RepoName:
    Type: String
    Default: 'cognito_restore_test'
  GitBranch:
    Type: String
    Default: 'main'
  Region:
    Type: String
    Default: 'ap-south-1'
  ResourceStackName:
    Type: String
    Default: 'cognito-restore-service-dev-stack'
  PipelineArtifactBucket:
    Type: String
    Default: 'restore-dev-pipeline-artifactsbucket'
  CodeStarConnectionArn:
    Type: String
    Default: 'arn:aws:codeconnections:ap-south-1:698032826194:connection/1a46d7fe-b424-4e8f-a61c-1b32b52173d7'
  Stage:
    Type: String
    Default: 'dev'
  S3Bucket:
    Type: String
    Default: 'cognito-backup-bucket-test-s3'
  S3Key:
    Type: String
    Default: 'cognito-users-backup.json'
  UserPoolId:
    Type: String
    Default: 'ap-south-1_OpPrIODGO'
  XrayEnabled:
    Type: String
    Default: 'true'
  Tags:
    Type: String
    Default: 'Project=CognitoRestore Service=Serverless'
  IsS3BucketExists:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
  VpcCIDR:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR block for the VPC
  PublicSubnet1CIDR:
    Type: String
    Default: '10.0.1.0/24'
    Description: CIDR block for public subnet 1
  PublicSubnet2CIDR:
    Type: String
    Default: '10.0.2.0/24'
    Description: CIDR block for public subnet 2

Conditions:
  IsS3BucketExistsCondition: !Equals [!Ref IsS3BucketExists, "true"]

Resources:
  # VPC Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Environment}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Environment}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Environment}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Environment}-public-subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Environment}-public-route-table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  DefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default security group for Cognito Restore Service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Environment}-sg

  # Export VPC resources for use in Serverless Framework
  VpcResourcesExport:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cognito-backup-bucket-test-s3.s3.ap-south-1.amazonaws.com/vpc-exports.yaml
      Parameters:
        VpcId: !Ref VPC
        PublicSubnet1Id: !Ref PublicSubnet1
        PublicSubnet2Id: !Ref PublicSubnet2
        DefaultSecurityGroupId: !Ref DefaultSecurityGroup
      TimeoutInMinutes: 10

  # CodePipeline Resources
  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Prefix}-${Environment}-pipe-${AWS::AccountId}'

  PipelineArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineArtifactBucket
      PolicyDocument:
        Statement:
          - Effect: 'Deny'
            Action: 's3:*'
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}
              - !Sub arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}/*
            Condition:
              Bool:
                aws:SecureTransport: false
          - Effect: Allow
            Action: s3:*
            Principal:
              AWS:
                - !GetAtt CodePipelineExecutionRole.Arn
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}
              - !Sub arn:${AWS::Partition}:s3:::${CodePipelineArtifactBucket}/*

  CodePipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Prefix}-${Environment}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: codepipeline.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Prefix}-${Environment}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: CodeBuildServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Resource:
                  - !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:PutImage"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                  - "iam:PassRole"
                Resource: "*"

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${RepoName}-${Environment}
      EmptyOnDelete: false
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the last 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  CodeBuildProjectBuildAndPackage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${Prefix}-${Environment}-BuildPackage'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REGION
            Value: !Ref Region
          - Name: AWS_REGION
            Value: !Ref Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_ECR_REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}-${Environment}
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      TimeoutInMinutes: 30

  CodeBuildProjectDeploy:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${Prefix}-${Environment}-Deploy'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_REGION
            Value: !Ref Region
          - Name: AWS_ECR_REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}-${Environment}
          - Name: STAGE
            Value: !Ref Environment
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-deploy.yml
      TimeoutInMinutes: 30

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${RepoName}-${Environment}-pipeline'
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      RoleArn: !GetAtt CodePipelineExecutionRole.Arn
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:
            - Name: SourceCodeRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Sub "${GitHubOwner}/${GitHubRepositoryName}"
                BranchName: !Ref GitBranch
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceCodeAsZip
              RunOrder: 1
        - Name: BuildAndPackage
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                ProjectName: !Ref CodeBuildProjectBuildAndPackage
              InputArtifacts:
                - Name: SourceCodeAsZip
              OutputArtifacts:
                - Name: BuildArtifactAsZip
        - Name: Deploy
          Actions:
            - Name: DeployServerless
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProjectDeploy
              InputArtifacts:
                - Name: BuildArtifactAsZip
              RunOrder: 1

Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: VpcId

  PublicSubnet1:
    Description: The ID of the first public subnet
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1

  PublicSubnet2:
    Description: The ID of the second public subnet
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2

  DefaultSecurityGroup:
    Description: The ID of the default security group
    Value: !Ref DefaultSecurityGroup
    Export:
      Name: DefaultSecurityGroup

  PipelineURL:
    Description: URL to the CodePipeline console
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${RepoName}-${Environment}-pipeline
  
  ECRRepositoryURL:
    Description: URL to the ECR Repository
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepoName}-${Environment}