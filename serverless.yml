service: cognito-restore-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'ap-south-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:InitiateLayerUpload
            - ecr:UploadLayerPart
            - ecr:CompleteLayerUpload
            - ecr:PutImage
          Resource: '*'
        - Effect: Allow
          Action:
            - batch:SubmitJob
            - batch:DescribeJobs
            - batch:TerminateJob
          Resource: '*'
        - Effect: Allow
          Action:
            - cognito-idp:ListUsers
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminUpdateUserAttributes
          Resource: '*'
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: arn:aws:s3:::${self:custom.s3Bucket}/${self:custom.s3Key}
        - Effect: Allow
          Action:
            - iam:PassRole
          Resource: '*'

custom:
  namePrefix: ${self:service}-${self:provider.stage}
  ecrRepository:
    name: cognito_restore_test-${self:provider.stage}
  s3Bucket: ${opt:bucket, 'cognito-backup-bucket'}
  s3Key: ${opt:key, 'cognito-backup.json'}
  userPoolId: ${opt:userPoolId, 'ap-south-1_OpPrIODGO'}
  ecrRepositoryUri: ${cf:cognito-restore-codepipeline.EcrRepositoryUri}

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!.serverless/**'
    - '!.git/**'

functions:
  imagePusher:
    image: ${aws:accountId}.dkr.ecr.${self:provider.region}.amazonaws.com/${self:custom.ecrRepository.name}:latest
    environment:
      ECR_REPOSITORY: ${self:custom.ecrRepository.name}
      DOCKERFILE_PATH: ./docker
      BUILD_PATH: ./docker

resources:
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: ${self:custom.namePrefix}-vpc

    Subnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: "10.0.1.0/24"
        AvailabilityZone: !Sub "${self:provider.region}a"
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:custom.namePrefix}-subnet1

    Subnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: "10.0.2.0/24"
        AvailabilityZone: !Sub "${self:provider.region}b"
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:custom.namePrefix}-subnet2

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:custom.namePrefix}-igw

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    VpcSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow access to Batch
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: "0.0.0.0/0"
        Tags:
          - Key: Name
            Value: ${self:custom.namePrefix}-sg

    FargateExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        Policies:
          - PolicyName: S3Access
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:custom.s3Bucket}/${self:custom.s3Key}

    FargateJobRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CognitoRestorePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - cognito-idp:ListUsers
                    - cognito-idp:AdminCreateUser
                    - cognito-idp:AdminSetUserPassword
                    - cognito-idp:AdminUpdateUserAttributes
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:custom.s3Bucket}/${self:custom.s3Key}

    BatchServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: batch.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

    BatchComputeEnvironment:
      Type: AWS::Batch::ComputeEnvironment
      Properties:
        Type: MANAGED
        State: ENABLED
        ServiceRole: !GetAtt BatchServiceRole.Arn
        ComputeEnvironmentName: ${self:custom.namePrefix}-env
        ComputeResources:
          Type: FARGATE
          MaxvCpus: 4
          Subnets:
            - Ref: Subnet1
            - Ref: Subnet2
          SecurityGroupIds:
            - Ref: VpcSecurityGroup

    BatchJobQueue:
      Type: AWS::Batch::JobQueue
      Properties:
        JobQueueName: ${self:custom.namePrefix}-queue
        State: ENABLED
        Priority: 1
        ComputeEnvironmentOrder:
          - Order: 1
            ComputeEnvironment: !Ref BatchComputeEnvironment

    BatchJobDefinition:
      Type: AWS::Batch::JobDefinition
      Properties:
        JobDefinitionName: ${self:custom.namePrefix}-job-def
        Type: container
        PlatformCapabilities:
          - FARGATE
        ContainerProperties:
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${self:custom.ecrRepository.name}:latest
          ExecutionRoleArn: !GetAtt FargateExecutionRole.Arn
          JobRoleArn: !GetAtt FargateJobRole.Arn
          FargatePlatformConfiguration:
            PlatformVersion: LATEST
          ResourceRequirements:
            - Type: VCPU
              Value: '1'
            - Type: MEMORY
              Value: '2048'
          Environment:
            - Name: NEW_USER_POOL_ID
              Value: ${self:custom.userPoolId}
            - Name: REGION
              Value: ${self:provider.region}
            - Name: S3_BUCKET
              Value: ${self:custom.s3Bucket}
            - Name: S3_KEY
              Value: ${self:custom.s3Key}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /aws/batch/${self:custom.namePrefix}
              awslogs-region: ${self:provider.region}
              awslogs-stream-prefix: cognito-restore

outputs:
  EcrRepositoryUri:
    Description: ECR Repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${self:custom.ecrRepository.name}

  JobQueueArn:
    Description: The ARN of the Batch Job Queue
    Value: !Ref BatchJobQueue

  JobDefinitionArn:
    Description: The ARN of the Batch Job Definition
    Value: !Ref BatchJobDefinition

plugins:
  # Uncomment if you're using specific plugins
  # - serverless-aws-resource-names
